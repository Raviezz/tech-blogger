{"version":3,"sources":["components/feed-tag.js","components/common-components/intro-util.js","components/intro.js","components/display-feeds.js","components/feed.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["FeedDisplayCard","props","Box","display","justifyContent","padding","flexWrap","Typography","variant","color","this","feed","to","className","React","Component","Centered","align","children","OutlinedButtonLink","href","link","text","Intro","style","fontSize","marginBottom","DisplayFeeds","PanelGroup","accordion","Panel","header","Feed","match","params","id","headerStyles","height","whiteSpace","overflow","contentStyle","NavToggle","expand","onChange","Navbar","appearance","Body","Nav","pullRight","Item","onClick","width","textAlign","Icon","icon","HomePage","state","handleToggle","bind","setState","Container","Header","Divider","Content","path","component","exact","Sidebar","flexDirection","collapsible","Sidenav","size","verticalAlign","marginLeft","expanded","defaultOpenKeys","eventKey","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d18f1e13.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Row from 'react-bootstrap/Row';\r\nimport '../styles/feed-display.css'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class FeedDisplayCard extends React.Component{\r\n    constructor(props){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n           <Box\r\n           display=\"flex\"\r\n           justifyContent=\"space-between\"\r\n           padding=\"8\"\r\n           flexWrap=\"nowrap\"\r\n           >\r\n                   <Typography variant=\"subtitle1\" color=\"#38ef7d\">\r\n                    {this.props.feed}  sub title\r\n                    </Typography>\r\n                    <Link to={`/feed/${this.props.feed}`}>\r\n                    <a className=\"view-more\" >view</a>\r\n                    </Link>\r\n            </Box>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport './intro-util.css';\r\n\r\nexport function Centered(props) {\r\n    return (\r\n        <div align={\"center\"}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function OutlinedButtonLink(props) {\r\n    return (\r\n        <div>\r\n            <a className={\"outlinedButtonLink\"} href={props.link}>{props.text}</a>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Centered, OutlinedButtonLink} from './common-components/intro-util';\r\n\r\nexport default class Intro extends React.Component{\r\n    constructor(props){\r\n        super();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <Centered>\r\n                <div style={{fontSize: 22, marginBottom: 100}}>\r\n                <p>This blogger is maintained by two geeks who did their phd in machine learning.\r\n                    Articles from this site gives u immerse knowledge and more practical.\r\n                    Please share it to your friends if you feel good.\r\n                    <br/><br/>\r\n                </p>\r\n                    <OutlinedButtonLink  text={\"Know More\"}/>\r\n                </div>\r\n            </Centered>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {PanelGroup,Panel} from 'rsuite';\r\nimport FeedDisplayCard from './feed-tag';\r\nimport Intro from './intro';\r\n\r\nfunction DisplayFeeds() {\r\n    return (\r\n        <div>\r\n            <Intro />\r\n            <PanelGroup accordion>\r\n            <Panel header=\"Feed 1\" >\r\n             <FeedDisplayCard feed={\"feed 1\"} />\r\n            </Panel>\r\n            <Panel header=\"Feed 2\">\r\n            <FeedDisplayCard feed={\"feed 2\"} />\r\n            </Panel>\r\n            <Panel header=\"Feed 3\">\r\n            <FeedDisplayCard feed={\"feed 3\"} />\r\n            </Panel>\r\n          </PanelGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayFeeds;","import React from 'react';\r\n//import Typography from '@material-ui/core/Typography';\r\n\r\nfunction Feed({match}) {\r\n    return (\r\n        <div>\r\n            <h1>{match.params.id}</h1>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Feed;","import React from 'react';\r\nimport {Sidenav, Nav,Navbar,PanelGroup,Icon,Container,Sidebar,Header,Content,Divider,Panel} from 'rsuite';\r\nimport '../styles/home.css';\r\nimport DisplayFeeds from './display-feeds';\r\nimport {BrowserRouter as Router,Switch, Route} from 'react-router-dom';\r\nimport Feed from './feed';\r\n\r\n\r\nconst headerStyles = {\r\n    padding: 18,\r\n    fontSize: 16,\r\n    height: 56,\r\n    whiteSpace: 'nowrap',\r\n    overflow: 'hidden',\r\n\r\n  };\r\n  \r\n  const iconStyles = {\r\n    width: 56,\r\n    height: 56,\r\n    lineHeight: '56px',\r\n    textAlign: 'center'\r\n  };\r\n\r\n  const contentStyle = {\r\n    padding: 10,\r\n  }\r\n  \r\n  const NavToggle = ({ expand, onChange }) => {\r\n    return (\r\n      <Navbar appearance=\"subtle\" className=\"nav-toggle\">\r\n        <Navbar.Body>\r\n          <Nav pullRight>\r\n            <Nav.Item onClick={onChange} style={{ width: 56, textAlign: 'center' }}>\r\n              <Icon icon={expand ? 'angle-left' : 'angle-right'} />\r\n            </Nav.Item>\r\n          </Nav>\r\n        </Navbar.Body>\r\n      </Navbar>\r\n    );\r\n  };\r\n  \r\nexport default class HomePage extends React.Component {\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expand: false\r\n    };\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n  handleToggle() {\r\n    this.setState({\r\n      expand: !this.state.expand\r\n    });\r\n  }\r\n  render() {\r\n    const { expand } = this.state;\r\n    return (\r\n      <div className=\"show-fake-browser sidebar-page\">\r\n        <Container>\r\n        <Container>\r\n            <Header>\r\n              <h2>BLOGGER</h2>\r\n            </Header>\r\n            <Divider />\r\n            \r\n             \r\n            <Content style={contentStyle}>\r\n            <Router>\r\n              <Switch>\r\n              <Route path='/feeds'  component={DisplayFeeds}  />\r\n              <Route path='/feed/:id' exact component={Feed}  />\r\n              </Switch>\r\n              </Router>\r\n            </Content>\r\n           \r\n          </Container>\r\n          <Sidebar\r\n            style={{ display: 'flex', flexDirection: 'column' }}\r\n            width={expand ? 260 : 56}\r\n            collapsible\r\n          >\r\n            <Sidenav.Header>\r\n              <div style={headerStyles} className={\"nav-slider\"}>\r\n                <Icon icon=\"list\" size=\"lg\" style={{ verticalAlign: 0 }} />\r\n                <span style={{ marginLeft: 12 }}> BRAND</span>\r\n              </div>\r\n            </Sidenav.Header>\r\n            <Sidenav\r\n              expanded={expand}\r\n              defaultOpenKeys={['3']}\r\n              appearance=\"subtle\"\r\n            >\r\n              <Sidenav.Body>\r\n                <Nav>\r\n                  <Nav.Item eventKey=\"1\" icon={<Icon icon=\"dashboard\" />}>\r\n                    HOME\r\n                  </Nav.Item>\r\n                  <Nav.Item eventKey=\"2\" icon={<Icon icon=\"group\" />}>\r\n                   My Blogs\r\n                  </Nav.Item>\r\n                </Nav>\r\n              </Sidenav.Body>\r\n            </Sidenav>\r\n            <NavToggle expand={expand} onChange={this.handleToggle} />\r\n          </Sidebar>\r\n\r\n          \r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport HomePage from './components/home';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nfunction App() {\r\n  return (\r\n    <HomePage />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}